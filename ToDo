# general

- expected number of messages for a round: inferred from the send function
- locally testable safety/liveness conditions: of the form ∀ p. QF-φ(p)
- split the sources into multiple parts/sub-projects
  * cleaner separation between the runtime and the declarations
  * so we can use macros for the testing and debugging in the main project
- find a way to get generic algorithms:
  currently we have problem with anonymous class (new Process ...)
  "Parameter type in structural refinement may not refer to an abstract type defined outside that refinement"
  need to either find a way of processing Process differently or encapsulate instance variables differently
  it is possible to add the type parameter when rewriting the class ?
- allow for event driven algorithms
  could process the messages as soon as received
  current version can be built on top of that
- allow for round local variables (reinitialized each time)


# runtime

- reduce number of threads, improve pooling:
    could we use ForkJoinTask as queue of thing to do (instead of the current queue of message)
    a new task join on the previous task (do we need locking to avoid weak memory model problem, TODO make some test)
    use an java.util.concurrent.atomic.AtomicReference to store the tail of the task queue
        compareAndSet for cleanUp
        getAndSet for adding a new task
    what are the tasks:
        start
        stop
        message
        timeout
        defaultHandler
- reduce memory footprint
- more predictable performances when overloaded


# verification

- reimplement the extraction using scala-meta
- Formula:
    * generalize typer overloading: Int vs Real
- InstGen
    * smarter heuristics
- better structure of the specification:
    * which invariant we can use to prove what property
    * add temporal elements to spec/formula
- allow pure functions in the send method
- reduce memory footprint of Simplify
- extraction of initial state: if a variable is not initialized in the process, take the default value in the declaration
- extract the spec of aux fct from the type annotation
- uses https://github.com/dzufferey/scala-smtlib-interface for the smtlib interface (code duplication)
- parsing model:
  * better support for CVC4
  * use the smtlib eval command as alternative (once we know the domain)


# example

- not just algorithms but "complete" systems


# network emulation: packet loss, delay, ...

- http://www.linuxfoundation.org/collaborate/workgroups/networking/netem
- https://gist.github.com/trongthanh/1196596
- http://www.cs.virginia.edu/~sdb7e/os_project/assignment.html

----------
    tc qdisc add dev lo root netem delay 100ms loss 0.1%
    tc qdisc del dev lo root netem
----------
    tc qdisc change dev eth0 root netem loss 0.1%
This causes 1/10th of a percent (i.e 1 out of 1000) packets to be randomly dropped.
    tc qdisc change dev eth0 root netem loss 0.3% 25%
This will cause 0.3% of packets to be lost, and each successive probability depends by a quarter on the last one.
----------
    tc qdisc change dev eth0 root netem duplicate 1%
    tc qdisc change dev eth0 root netem corrupt 0.1%
    tc qdisc change dev eth0 root netem delay 10ms reorder 25% 50%
In this example, 25% of packets (with a correlation of 50%) will get sent immediately, others will be delayed by 10ms.

# known bugs

* incompleteness in the verification (currently pretty broken)

